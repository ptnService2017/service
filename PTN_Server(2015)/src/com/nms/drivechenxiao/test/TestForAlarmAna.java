package com.nms.drivechenxiao.test;

import java.util.List;

import com.nms.drive.service.impl.CoderUtils;
import com.nms.drivechenxiao.analysis.AnalysisAlarm;
import com.nms.drivechenxiao.service.bean.alarm.AlarmObject;

public class TestForAlarmAna {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new TestForAlarmAna().testForAlarmAna();
	}
	public void testForAlarmAna(){
		AnalysisAlarm alarm = new AnalysisAlarm();
		List<AlarmObject> listAlarm = alarm.analysisReportAlarm(getCommand(),null);
		l("-- listSize = "+listAlarm.size());
	}
	private byte[] getTestCommand(){
		byte[] b = new byte[]{
				(byte)0x72 ,(byte)0x6D ,(byte)0x74 ,(byte)0x01 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x8E  ,(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x06 ,(byte)0x61 ,(byte)0x6C ,(byte)0x6D,  
				(byte)0x63 ,(byte)0x68 ,(byte)0x67 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x08 ,(byte)0x00  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x07 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B,  
				(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00  ,(byte)0x00 ,(byte)0x01 ,(byte)0x13 ,(byte)0x01 ,(byte)0x02 ,(byte)0x00 ,(byte)0x01 ,(byte)0x13,  
				(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x40  ,(byte)0x26 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04  ,(byte)0x14 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x36 ,(byte)0x5C ,(byte)0x3F ,(byte)0x29,  
				(byte)0x6A ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B ,(byte)0x30 ,(byte)0x00  ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01,  
				(byte)0x13 ,(byte)0x01 ,(byte)0x02 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00  ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x40 ,(byte)0x26 ,(byte)0x13,  
				(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00  ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x14 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x01 ,(byte)0x36 ,(byte)0x5C ,(byte)0x3F ,(byte)0x29 ,(byte)0x6A ,(byte)0x00  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B ,(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00,  
				(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x13 ,(byte)0x01  ,(byte)0x02 ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02,  
				(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x40 ,(byte)0x26 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00  ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13,  
				(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x14 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01  ,(byte)0x36 ,(byte)0x5C ,(byte)0x3F ,(byte)0x29 ,(byte)0x6A ,(byte)0x00 ,(byte)0x00 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x2B ,(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x13  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x13 ,(byte)0x01 ,(byte)0x02 ,(byte)0x00,  
				(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00  ,(byte)0x00 ,(byte)0x40 ,(byte)0x26 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x03,  
				(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00  ,(byte)0x00 ,(byte)0x04 ,(byte)0x14 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x36 ,(byte)0x5C,  
				(byte)0x3F ,(byte)0x29 ,(byte)0x6A ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B  ,(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x01 ,(byte)0x13 ,(byte)0x08 ,(byte)0x21 ,(byte)0x03 ,(byte)0x01 ,(byte)0x13  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x40,  
				(byte)0x2A ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00  ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04,  
				(byte)0x14 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x36 ,(byte)0x5C ,(byte)0x3F ,(byte)0x29  ,(byte)0x6A ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B ,(byte)0x30 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01  ,(byte)0x13 ,(byte)0x08 ,(byte)0x21 ,(byte)0x03 ,(byte)0x01 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x40 ,(byte)0x2E ,(byte)0x13  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00,  
				(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x14 ,(byte)0x00  ,(byte)0x00 ,(byte)0x01 ,(byte)0x36 ,(byte)0x5C ,(byte)0x3F ,(byte)0x29 ,(byte)0x6A ,(byte)0x00,  
				(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B ,(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00  ,(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x13 ,(byte)0x08,  
				(byte)0x21 ,(byte)0x03 ,(byte)0x01 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02  ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x40 ,(byte)0x32 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00,  
				(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x14 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01,  
				(byte)0x36 ,(byte)0x5C ,(byte)0x3F ,(byte)0x29 ,(byte)0x6A ,(byte)0x00 
		};
		return b;
	}
	private byte[] getCommand(){
		byte[] b = new byte[]{
				(byte)0x72 ,(byte)0x6D ,(byte)0x74 ,(byte)0x01 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x4A  ,(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x06 ,(byte)0x61 ,(byte)0x6C ,(byte)0x6D , 
				(byte)0x63 ,(byte)0x68 ,(byte)0x67 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x00  ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x2B , 
				(byte)0x30 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00  ,(byte)0x00 ,(byte)0x01 ,(byte)0x13 ,(byte)0x08 ,(byte)0x12 ,(byte)0x01 ,(byte)0x01 ,(byte)0x13  ,
				(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x02 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00  ,(byte)0x1E ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x03 ,(byte)0x13 ,(byte)0x00 , 
				(byte)0x00 ,(byte)0x00 ,(byte)0x05 ,(byte)0x13 ,(byte)0x00 ,(byte)0x00 ,(byte)0x00 ,(byte)0x04  ,(byte)0x14 ,(byte)0x00 ,(byte)0x00 ,(byte)0x01 ,(byte)0x41 ,(byte)0x48 ,(byte)0x9C ,(byte)0xCE  ,
				(byte)0x6E ,(byte)0x00 
		};
		return b;
	}
	public void l(String s){
		System.out.println(s);
	}public void l(long s){
		System.out.println(s);
	}
	public void l(Double s){
		System.out.println(s);
	}public void l(byte[] s){
		for(int i=0;i<s.length;i++){
			byte[] temp = new byte[4];
			temp[0] = 0x00;
			temp[1] = 0x00;
			temp[2] = 0x00;
			temp[3] = s[i];
			String value16 = CoderUtils.intTo16String(CoderUtils.bytesToInt(temp));
			System.out.print(" byte["+i+"] = "+value16);
		}
		System.out.println("");
	}
}
